#!/bin/bash

set -x

CONFLUENT_HOME="/home/ubuntu/monitoring"
SERVER_NAME={{ server_name }} # !!!!!

PROPERTIES_FILE="${CONFLUENT_HOME}/properties/controller.properties"

DATA_DIR="/data/controller"
LOG_DIR="/log/controller"
export LOG_DIR

### java home
export JAVA_HOME="/home/ubuntu/jdk-17.0.8+7"

######################################################################

### memory options
KAFKA_HEAP_OPTS="${KAFKA_HEAP_OPTS} -Xms1G -Xmx1G" # 메모리 설정
export KAFKA_HEAP_OPTS # GC 등 성능 최적화 JVM 옵션

### performance
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -server"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:+UseG1GC"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:MaxGCPauseMillis=20"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:InitiatingHeapOccupancyPercent=35"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:+ExplicitGCInvokesConcurrent"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -XX:MaxInlineLevel=15"
KAFKA_JVM_PERFORMANCE_OPTS="${KAFKA_JVM_PERFORMANCE_OPTS} -Djava.awt.headless=true"
export KAFKA_JVM_PERFORMANCE_OPTS

### generic jvm settings ## 서버 이름 등 설정
# KAFKA_OPTS=""
KAFKA_OPTS="${KAFKA_OPTS} -D${SERVER_NAME} -javaagent:${CONFLUENT_HOME}/jmxexporter/jmx_prometheus_javaagent-0.20.0.jar=2346:${CONFLUENT_HOME}/jmx-exporter/kafka_broker.yml"
export KAFKA_OPTS

### gc option
export GC_LOG_ENABLED="true"

### jmx
# export JMX_PORT=""
KAFKA_JMX_OPTS="${KAFKA_JMX_OPTS} -Dcom.sun.management.jmxremote"
KAFKA_JMX_OPTS="${KAFKA_JMX_OPTS} -Dcom.sun.management.jmxremote.authenticate=false"
KAFKA_JMX_OPTS="${KAFKA_JMX_OPTS} -Dcom.sun.management.jmxremote.ssl=false "
export KAFKA_JMX_OPTS

### log4j
KAFKA_LOG4J_OPTS="${KAFKA_LOG4J_OPTS} -Dlog4j.configuration=file:${CONFLUENT_HOME}/properties/controller-log4j.properties"
export KAFKA_LOG4J_OPTS

######################################################################

## aws credentials
export AWS_ACCESS_KEY_ID="{{ aws_access_key_id }}"
export AWS_SECRET_ACCESS_KEY="{{ aws_secret_access_key }}"

######################################################################
## check current user
CURRENT_USER="$(id -un)"
if [ "${CURRENT_USER}" = "root" ]; then
echo "[ERROR] The current user is root!"
exit
fi

### check running process
PID="$(pgrep -xa java | grep ${PROPERTIES_FILE} | grep ${SERVER_NAME} | awk '{print $1}')"
if [ -n "${PID}" ]; then
echo "[ERROR] The ${SERVER_NAME} (pid ${PID}) is already running!"
exit
fi

### create data and log dirs
if [ ! -d "${DATA_DIR}" ]; then
mkdir -p ${DATA_DIR}
echo "[OK] DATA_DIR(${DATA_DIR}) 생성됨"
fi
if [ ! -d "${LOG_DIR}/backup" ]; then
mkdir -p ${LOG_DIR}/backup
echo "[OK] LOG_DIR(${LOG_DIR}/backup) 생성됨"
fi

### backup stdout log
GET_DATE="$(date +'%Y%m%d_%H%M%S')"
if [ -f "${LOG_DIR}/nohup.${SERVER_NAME}.out" ]; then
mv ${LOG_DIR}/nohup.${SERVER_NAME}.out ${LOG_DIR}/backup/nohup.${SERVER_NAME}.${GET_DATE}.out
fi

touch ${LOG_DIR}/nohup.${SERVER_NAME}.out
nohup ${CONFLUENT_HOME}/bin/kafka-server-start ${PROPERTIES_FILE} > ${LOG_DIR}/nohup.${SERVER_NAME}.out
2>&1 &
# tail -f ${LOG_DIR}/nohup.${SERVER_NAME}.out
